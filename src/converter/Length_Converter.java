/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package converter;

import javax.swing.ImageIcon;

/**
 *
 * @author Shady Emad
 */
public class Length_Converter extends javax.swing.JFrame {

    /**
     * Creates new form length
     */
    public Length_Converter() {
        initComponents();
    }
     double num1;
     double  result;
     String from_type;
     String to_type;

     public void setAll(String s){
        String all = txtAll.getText() + s;
        txtAll.setText(all);
     }
           private void deleteone(){
          String all = txtAll.getText();
         num1 = Long.parseLong(txtAll.getText().substring(0, all.length()-1)); 
         txtAll.setText(String.valueOf(num1));

     }
    public void CloseFrame() {
        super.dispose();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtAll = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        btn10 = new javax.swing.JButton();
        btn11 = new javax.swing.JButton();
        btn12 = new javax.swing.JButton();
        btn13 = new javax.swing.JButton();
        btnpoint1 = new javax.swing.JButton();
        btn14 = new javax.swing.JButton();
        btn15 = new javax.swing.JButton();
        btn16 = new javax.swing.JButton();
        btn17 = new javax.swing.JButton();
        btn18 = new javax.swing.JButton();
        btn19 = new javax.swing.JButton();
        btnclear1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        resultAll = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton29 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        txtAll.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jComboBox1.setBackground(new java.awt.Color(128, 128, 128));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "meter [m]", "kilometer [km]", "decimeter [dm]", "centimeter [cm]", "millimeter [mm]", "micrometer [um]", "nanometer [nm]", "mile [mi]", "yard [yd]", "foot [ft]", "inch [in]" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        btn10.setBackground(new java.awt.Color(151, 154, 154));
        btn10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn10.setForeground(new java.awt.Color(255, 255, 255));
        btn10.setText("8");
        btn10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10ActionPerformed(evt);
            }
        });

        btn11.setBackground(new java.awt.Color(151, 154, 154));
        btn11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn11.setForeground(new java.awt.Color(255, 255, 255));
        btn11.setText("9");
        btn11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn11ActionPerformed(evt);
            }
        });

        btn12.setBackground(new java.awt.Color(151, 154, 154));
        btn12.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn12.setForeground(new java.awt.Color(255, 255, 255));
        btn12.setText("6");
        btn12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn12ActionPerformed(evt);
            }
        });

        btn13.setBackground(new java.awt.Color(151, 154, 154));
        btn13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn13.setForeground(new java.awt.Color(255, 255, 255));
        btn13.setText("3");
        btn13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn13ActionPerformed(evt);
            }
        });

        btnpoint1.setBackground(new java.awt.Color(151, 154, 154));
        btnpoint1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnpoint1.setForeground(new java.awt.Color(255, 255, 255));
        btnpoint1.setText(".");
        btnpoint1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpoint1ActionPerformed(evt);
            }
        });

        btn14.setBackground(new java.awt.Color(151, 154, 154));
        btn14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn14.setForeground(new java.awt.Color(255, 255, 255));
        btn14.setText("0");
        btn14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn14ActionPerformed(evt);
            }
        });

        btn15.setBackground(new java.awt.Color(151, 154, 154));
        btn15.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn15.setForeground(new java.awt.Color(255, 255, 255));
        btn15.setText("2");
        btn15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn15ActionPerformed(evt);
            }
        });

        btn16.setBackground(new java.awt.Color(151, 154, 154));
        btn16.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn16.setForeground(new java.awt.Color(255, 255, 255));
        btn16.setText("5");
        btn16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn16ActionPerformed(evt);
            }
        });

        btn17.setBackground(new java.awt.Color(151, 154, 154));
        btn17.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn17.setForeground(new java.awt.Color(255, 255, 255));
        btn17.setText("4");
        btn17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn17ActionPerformed(evt);
            }
        });

        btn18.setBackground(new java.awt.Color(151, 154, 154));
        btn18.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn18.setForeground(new java.awt.Color(255, 255, 255));
        btn18.setText("7");
        btn18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn18ActionPerformed(evt);
            }
        });

        btn19.setBackground(new java.awt.Color(151, 154, 154));
        btn19.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btn19.setForeground(new java.awt.Color(255, 255, 255));
        btn19.setText("1");
        btn19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn19ActionPerformed(evt);
            }
        });

        btnclear1.setBackground(new java.awt.Color(115, 124, 161));
        btnclear1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnclear1.setForeground(new java.awt.Color(255, 255, 255));
        btnclear1.setText("Clear");
        btnclear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclear1ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 0, 0));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("DEL");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        resultAll.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("From");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("To");

        jButton1.setBackground(new java.awt.Color(0, 128, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Length");

        jComboBox2.setBackground(new java.awt.Color(128, 128, 128));
        jComboBox2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "meter [m]", "kilometer [km]", "decimeter [dm]", "centimeter [cm]", "millimeter [mm]", "micrometer [um]", "nanometer [nm]", "mile [mi]", "yard [yd]", "foot [ft]", "inch [in]" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton29.setBackground(new java.awt.Color(255, 0, 0));
        jButton29.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton29.setForeground(new java.awt.Color(255, 255, 255));
        jButton29.setText("OFF");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAll, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultAll, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn14, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnpoint1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn19, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn16, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn15, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn13, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn12, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn11, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnclear1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAll, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultAll, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnclear1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn18, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn17, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn19, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn11, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn16, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn12, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn15, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn13, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnpoint1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btn10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10ActionPerformed
        setAll("8");
    }//GEN-LAST:event_btn10ActionPerformed

    private void btn11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn11ActionPerformed
        setAll("9");
    }//GEN-LAST:event_btn11ActionPerformed

    private void btn12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn12ActionPerformed
        setAll("6");
    }//GEN-LAST:event_btn12ActionPerformed

    private void btn13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn13ActionPerformed
        setAll("3");
    }//GEN-LAST:event_btn13ActionPerformed

    private void btnpoint1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpoint1ActionPerformed
        setAll(".");
    }//GEN-LAST:event_btnpoint1ActionPerformed

    private void btn14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn14ActionPerformed
        setAll("0");
    }//GEN-LAST:event_btn14ActionPerformed

    private void btn15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn15ActionPerformed
        setAll("2");
    }//GEN-LAST:event_btn15ActionPerformed

    private void btn16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn16ActionPerformed
        setAll("5");
    }//GEN-LAST:event_btn16ActionPerformed

    private void btn17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn17ActionPerformed
        setAll("4");
    }//GEN-LAST:event_btn17ActionPerformed

    private void btn18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn18ActionPerformed
        setAll("7");
    }//GEN-LAST:event_btn18ActionPerformed

    private void btn19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn19ActionPerformed
        setAll("1");
    }//GEN-LAST:event_btn19ActionPerformed

    private void btnclear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclear1ActionPerformed
        txtAll.setText("");
    }//GEN-LAST:event_btnclear1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        deleteone();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        from_type = jComboBox1.getSelectedItem().toString();
        to_type = jComboBox2.getSelectedItem().toString();

        if(from_type.equals("meter [m]") ){
            if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 100;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1.0936133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 3.2808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 39.3700787;
                resultAll.setText(String.valueOf(result));
            }
        }
        
        if(from_type.equals("kilometer [km]") ){
            if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 100000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000000;
                result = result * 1000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1093.6133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 3280.8399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 39370.0787;
                resultAll.setText(String.valueOf(result));
            }
        }
        if(from_type.equals("decimeter [dm]") ){
            if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.1;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 100;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 100000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 100000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.10936133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.32808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 3.93700787;
                resultAll.setText(String.valueOf(result));
            }
        }    
        
        if(from_type.equals("centimeter [cm]") ){
            if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.00001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.1;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.01;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 10000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.00000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.010936133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.032808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.393700787;
                resultAll.setText(String.valueOf(result));
            }
        }
        if(from_type.equals("millimeter [mm]") ){
            if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.1;
                resultAll.setText(String.valueOf(result));
            }
	    else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000 ;
                resultAll.setText(String.valueOf(result));
            }

            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0010936133 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0032808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0393700787;
                resultAll.setText(String.valueOf(result));
            }
        }
        if(from_type.equals("micrometer [µm]") ){
            if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.00001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000010936133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000032808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000393700787;
                resultAll.setText(String.valueOf(result));
            }
        }
        
        if(from_type.equals("km [nm]") ){
            if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.00000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000001;
                resultAll.setText(String.valueOf(result));
            }
	    else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000001;
                resultAll.setText(String.valueOf(result));
            }

            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.001;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000000000000621371192;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000000010936133;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000000032808399;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000000393700787;
                resultAll.setText(String.valueOf(result));
            }
        }
        
        if(from_type.equals("mile [mi]") ){
            if(to_type.equals("mile [mi]]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1.609344;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 16093.44;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 160934.4;
                resultAll.setText(String.valueOf(result));
            }
	    else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1609344;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1609.344;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1000000000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1609344000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 1760;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 5280;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 63360;
                resultAll.setText(String.valueOf(result));
            }
        }
        if(from_type.equals("yard [yd]") ){
            if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0009144;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 9.14400;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 91.44;
                resultAll.setText(String.valueOf(result));
            }
	    else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 914.4;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.9144 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 914400;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 914400000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000568181818;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 3;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 36;
                resultAll.setText(String.valueOf(result));
            }
        }
        
        if(from_type.equals("foot [ft]") ){
            if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0003048;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 3.04800;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 30.48;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 304.8;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.3048;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 304800;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 304800000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.000189393939;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.333333333;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 12;
                resultAll.setText(String.valueOf(result));
            }
        }
        
        if(from_type.equals("inch [in]") ){
            if(to_type.equals("inch [in]")){
                num1= Double.parseDouble(txtAll.getText());
                resultAll.setText(String.valueOf(num1));
            }
            else if(to_type.equals("kilometer [km]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000254;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("decimeter [dm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.254;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("centimeter [cm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 2.54;
                resultAll.setText(String.valueOf(result));
            }
	    else if(to_type.equals("millimeter [mm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 25.4 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("meter [m]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0254;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("micrometer [µm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 25400 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("nanometer [nm]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 25400000;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("mile [mi]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0000157828283 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("yard [yd]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0277777778 ;
                resultAll.setText(String.valueOf(result));
            }
            else if(to_type.equals("foot [ft]")){
                num1= Double.parseDouble(txtAll.getText());
                result = num1 * 0.0833333333;
                resultAll.setText(String.valueOf(result));
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        CloseFrame();
    }//GEN-LAST:event_jButton29ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        ImageIcon icon = new ImageIcon("src/app icons/length.jpg");
        setIconImage(icon.getImage());
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Length_Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Length_Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Length_Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Length_Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Length_Converter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn10;
    private javax.swing.JButton btn11;
    private javax.swing.JButton btn12;
    private javax.swing.JButton btn13;
    private javax.swing.JButton btn14;
    private javax.swing.JButton btn15;
    private javax.swing.JButton btn16;
    private javax.swing.JButton btn17;
    private javax.swing.JButton btn18;
    private javax.swing.JButton btn19;
    private javax.swing.JButton btnclear1;
    private javax.swing.JButton btnpoint1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton29;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField resultAll;
    private javax.swing.JTextField txtAll;
    // End of variables declaration//GEN-END:variables
}
